public class Trayecto {
    // Atributos y métodos de la clase Trayecto...

    private AdaptadorConcreto adaptador;

    public Double calcularDemora() {
        Parada parada1 = this.paradas.get(0);
        Parada parada2 = this.paradas.get(1);
        Double distancia = this.adaptador.adaptar(parada1, parada2);
        Double tiempoEntreParadas = calcularTiempo(distancia);
        
        if (!this.seDetieneEnCadaParada()) {
            Double tiempoTotalAprox = 0.0;
            for (Parada parada : paradas) {
                tiempoTotalAprox += parada.getTiempoEntreParadas();
            }
            return tiempoTotalAprox;
        } else {
            return tiempoEntreParadas;
        }
    }
}

class AdaptadorConcreto implements Adaptador {
    private DistanceMatrix api;

    public AdaptadorConcreto(DistanceMatrix api) {
        this.api = api;
    }

    public Double adaptar(Parada origen, Parada destino) {
        Integer distancia = this.api.sacarDistancia(origen, destino);
        return adaptarDistancia(distancia);
    }

    public Double adaptarDistancia(Integer distancia) {
        // Implementación de adaptación de distancia...
        return (double) distancia; // Por ahora solo se devuelve la misma distancia
    }
}

public interface Adaptador {
    public Double adaptar(Parada origen, Parada destino);
}

// Código de la API
public interface DistanceMatrix {
    public Integer sacarDistancia(Parada origen, Parada destino);
}

